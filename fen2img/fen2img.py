# AUTOGENERATED! DO NOT EDIT! File to edit: 00_fen2img.ipynb (unless otherwise specified).

__all__ = ['load_svg', 'fen2img']

# Cell
from cairosvg import svg2png
import PIL.Image
from io import BytesIO

# Cell
def load_svg(svg_filename, width, height):
    return BytesIO(svg2png(url=svg_filename, output_width=width, output_height=height))

# Cell
def fen2img(fen, board_size=400, board_style='brown', boards_path='./boards',
            piece_style='merida', pieces_path='./pieces'):
    """Convert fen string to image.

    Args:
      - fen:         a FEN string.cc
      - board_size:  the width of the chess board.
      - board_style: supported board styles: 'chesscom', 'brown', 'falken', 'green', 'zeit', 'informator', 'sportverlag', 'beyer', 'blue'.
      - boards_path: path storing board style SVG files.
      - piece_style: supported piece styles: 'merida', 'case', 'wikipedia', 'alpha', 'uscf', 'condal', 'maya', 'leipzig'.
      - pieces_path: path storing piece style PNG files.

    Returns:
      - PIL.Image
    """
    board_filename = '{}/{}.svg'.format(boards_path, board_style)
    board_image = PIL.Image.open(load_svg(board_filename, board_size, board_size))
    piece_width, piece_height = board_size // 8, board_size // 8
    for i, row in enumerate(fen.split('/')):
        j = 0
        for col in row:
            if col >= '1' and col <= '9':
                j += int(col)
            else:
                if col >= 'a' and col <= 'z':
                    piece = 'w' + col.upper()
                else:
                    piece = 'b' + col
                piece_filename = '{}/{}/{}.png'.format(pieces_path, piece_style, piece)
                piece_image = PIL.Image.open(piece_filename)
                piece_image.resize((piece_width, piece_height))
                board_image.paste(piece_image, (j*piece_height, i*piece_width), piece_image)
                j += 1
    return board_image